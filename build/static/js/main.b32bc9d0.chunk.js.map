{"version":3,"sources":["utilities.js","App.js","index.js"],"names":["labelMap","1","name","color","2","3","4","5","drawRect","boxes","classes","scores","threshold","imgWidth","imgHeight","ctx","i","length","y","x","height","width","text","strokeStyle","lineWidth","fillStyle","font","beginPath","fillText","Math","round","rect","stroke","App","webcamRef","useRef","canvasRef","runCoco","a","tf","net","setInterval","detect","current","video","readyState","videoWidth","videoHeight","img","fromPixels","resized","resizeBilinear","casted","cast","expanded","expandDims","executeAsync","obj","console","log","array","getContext","requestAnimationFrame","useEffect","className","ref","muted","style","position","marginLeft","marginRight","left","right","textAlign","zindex","ReactDOM","render","StrictMode","document","getElementById","ServiceWorker","register"],"mappings":"yaACMA,EAAW,CACbC,EAAE,CAACC,KAAK,6CAAWC,MAAM,OACzBC,EAAE,CAACF,KAAK,eAAMC,MAAM,UACpBE,EAAE,CAACH,KAAK,eAAMC,MAAM,QACpBG,EAAE,CAACJ,KAAK,wCAAWC,MAAM,SACzBI,EAAE,CAACL,KAAK,qBAAOC,MAAM,UAIZK,EAAW,SAACC,EAAOC,EAASC,EAAQC,EAAWC,EAAUC,EAAWC,GAC7E,IAAI,IAAIC,EAAE,EAAGA,GAAGP,EAAMQ,OAAQD,IAC1B,GAAGP,EAAMO,IAAMN,EAAQM,IAAML,EAAOK,GAAGJ,EAAU,mBAElBH,EAAMO,GAFY,GAEtCE,EAFsC,KAEpCC,EAFoC,KAElCC,EAFkC,KAE3BC,EAF2B,KAGvCC,EAAOZ,EAAQM,GAGrBD,EAAIQ,YAAcvB,EAASsB,GAAT,MAClBP,EAAIS,UAAY,GAChBT,EAAIU,UAAY,QAChBV,EAAIW,KAAO,aAGXX,EAAIY,YACJZ,EAAIa,SAAS5B,EAASsB,GAAT,KAA0B,MAAQO,KAAKC,MAAgB,IAAVnB,EAAOK,IAAQ,IAAKG,EAAEN,EAAUK,EAAEJ,EAAU,IACtGC,EAAIgB,KAAKZ,EAAEN,EAAUK,EAAEJ,EAAWO,EAAMR,EAAS,EAAGO,EAAON,EAAU,KACrEC,EAAIiB,WCsGDC,MAxHf,WACE,IAAMC,EAAYC,iBAAO,MACnBC,EAAYD,iBAAO,MAGnBE,EAAO,uCAAG,4BAAAC,EAAA,sEAMIC,IAAkB,uGANtB,OAMRC,EANQ,OASdC,aAAY,WACVC,EAAOF,KACN,MAXW,2CAAH,qDAePE,EAAM,uCAAG,WAAOF,GAAP,qCAAAF,EAAA,yDAGkB,qBAAtBJ,EAAUS,SACK,OAAtBT,EAAUS,SAC6B,IAAvCT,EAAUS,QAAQC,MAAMC,WALb,wBAQLD,EAAQV,EAAUS,QAAQC,MAC1BE,EAAaZ,EAAUS,QAAQC,MAAME,WACrCC,EAAcb,EAAUS,QAAQC,MAAMG,YAG5Cb,EAAUS,QAAQC,MAAMvB,MAAQyB,EAChCZ,EAAUS,QAAQC,MAAMxB,OAAS2B,EAGjCX,EAAUO,QAAQtB,MAAQyB,EAC1BV,EAAUO,QAAQvB,OAAS2B,EAGrBC,EAAMT,IAAWU,WAAWL,GAC5BM,EAAUX,IAASY,eAAeH,EAAK,CAAC,IAAI,MAC5CI,EAASF,EAAQG,KAAK,SACtBC,EAAWF,EAAOG,WAAW,GAxBxB,UAyBOf,EAAIgB,aAAaF,GAzBxB,eAyBLG,EAzBK,OA0BXC,QAAQC,IAAIF,GA1BD,UA8BSA,EAAI,GAAGG,QA9BhB,eA8BLnD,EA9BK,iBA+BWgD,EAAI,GAAGG,QA/BlB,eA+BLlD,EA/BK,iBAgCU+C,EAAI,GAAGG,QAhCjB,QAgCLjD,EAhCK,OAmCLI,EAAMqB,EAAUO,QAAQkB,WAAW,MAOzCC,uBAAsB,WAAKtD,EAASC,EAAM,GAAIC,EAAQ,GAAIC,EAAO,GAAI,GAAKmC,EAAYC,EAAahC,MAInGwB,IAAWS,GACXT,IAAWW,GACXX,IAAWa,GACXb,IAAWe,GACXf,IAAWkB,GAlDA,4CAAH,sDAyDZ,OAFAM,qBAAU,WAAK1B,MAAW,IAGxB,yBAAK2B,UAAU,OACb,4BAAQA,UAAU,cAClB,yBAAKA,UAAU,OACf,kBAAC,IAAD,CACIC,IAAK/B,EACLgC,OAAO,EACPC,MAAO,CACLC,SAAU,SACVC,WAAY,IACZC,YAAa,IACbC,KAAM,EACNC,MAAO,EACPC,UAAW,SACXC,OAAQ,EACRrD,MAAO,IACPD,OAAQ,OAIZ,4BACE6C,IAAK7B,EACL4B,UAAW,OACXG,MAAO,CACLC,SAAU,WACVC,WAAY,OACZC,YAAa,OACbC,KAAM,EACNC,MAAO,EACPC,UAAW,SACXC,OAAQ,EACRrD,MAAO,IACPD,OAAQ,WCjHpBuD,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SAG1BC,cAAcC,a","file":"static/js/main.b32bc9d0.chunk.js","sourcesContent":["// Define  labelmap\r\nconst labelMap = {\r\n    1:{name:'තියෙනවා', color:'red'},\r\n    2:{name:'නැ', color:'yellow'},\r\n    3:{name:'අද', color:'blue'},\r\n    4:{name:'මොකද්ද?', color:'black'},\r\n    5:{name:'ඔව්', color:'white'},\r\n} \r\n\r\n// Define a drawing function\r\nexport const drawRect = (boxes, classes, scores, threshold, imgWidth, imgHeight, ctx)=>{\r\n    for(let i=0; i<=boxes.length; i++){\r\n        if(boxes[i] && classes[i] && scores[i]>threshold){\r\n            // Extract variables\r\n            const [y,x,height,width] = boxes[i]\r\n            const text = classes[i]\r\n            \r\n            // Set styling\r\n            ctx.strokeStyle = labelMap[text]['color']\r\n            ctx.lineWidth = 10\r\n            ctx.fillStyle = 'white'\r\n            ctx.font = '30px Arial'  \r\n            \r\n        // DRAW!!\r\n            ctx.beginPath()           \r\n            ctx.fillText(labelMap[text]['name'] +  ' - ' + Math.round(scores[i]*100)/100, x*imgWidth, y*imgHeight-10)\r\n            ctx.rect(x*imgWidth, y*imgHeight, width*imgWidth/2, height*imgHeight/1.5);\r\n            ctx.stroke()\r\n        }\r\n    }\r\n}","// Import dependencies\r\nimport React, { useRef, useState, useEffect } from \"react\";\r\nimport * as tf from \"@tensorflow/tfjs\";\r\nimport Webcam from \"react-webcam\";\r\nimport \"./App.css\";\r\nimport { nextFrame } from \"@tensorflow/tfjs\";\r\nimport {drawRect} from \"./utilities\"; \r\n\r\n\r\nfunction App() {\r\n  const webcamRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n\r\n  // Main function\r\n  const runCoco = async () => {\r\n\r\n    \r\n    // 3 Load network\r\n    //https://sinhalasignlanguagevoicedetection.s3.jp-tok.cloud-object-storage.appdomain.cloud/model.json\r\n    //https://signlanguagedetectionirumodel.s3.jp-tok.cloud-object-storage.appdomain.cloud/model.json\r\n    const net = await tf.loadGraphModel('https://sinhalasignlanguagevoicedetection.s3.jp-tok.cloud-object-storage.appdomain.cloud/model.json')\r\n    \r\n    //  Loop and detect hands\r\n    setInterval(() => {\r\n      detect(net);\r\n    }, 16.7);\r\n\r\n  };\r\n\r\n  const detect = async (net) => {\r\n    // Check data is available\r\n    if (\r\n      typeof webcamRef.current !== \"undefined\" &&\r\n      webcamRef.current !== null &&\r\n      webcamRef.current.video.readyState === 4\r\n    ) {\r\n      // Get Video Properties\r\n      const video = webcamRef.current.video;\r\n      const videoWidth = webcamRef.current.video.videoWidth;\r\n      const videoHeight = webcamRef.current.video.videoHeight;\r\n\r\n      // Set video width\r\n      webcamRef.current.video.width = videoWidth;\r\n      webcamRef.current.video.height = videoHeight;\r\n\r\n      // Set canvas height and width\r\n      canvasRef.current.width = videoWidth;\r\n      canvasRef.current.height = videoHeight;\r\n\r\n      // 4. TODO - Make Detections\r\n      const img = tf.browser.fromPixels(video)\r\n      const resized = tf.image.resizeBilinear(img, [640,480])\r\n      const casted = resized.cast('int32')\r\n      const expanded = casted.expandDims(0)\r\n      const obj = await net.executeAsync(expanded)\r\n      console.log(obj)\r\n\r\n      //console.log(await obj[5].array())\r\n\r\n      const boxes = await obj[5].array()\r\n      const classes = await obj[1].array()\r\n      const scores = await obj[4].array()\r\n      \r\n      // Draw mesh\r\n      const ctx = canvasRef.current.getContext(\"2d\");\r\n\r\n      // 5. TODO - Update drawing utility\r\n      // drawSomething(obj, ctx)  \r\n\r\n      \r\n      \r\n      requestAnimationFrame(()=>{drawRect(boxes[0], classes[0], scores[0], 0.9, videoWidth, videoHeight, ctx)}); \r\n      \r\n      \r\n\r\n      tf.dispose(img)\r\n      tf.dispose(resized)\r\n      tf.dispose(casted)\r\n      tf.dispose(expanded)\r\n      tf.dispose(obj)\r\n\r\n    }\r\n  };\r\n    \r\n  useEffect(()=>{runCoco()},[]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n      <div className=\"dog\">\r\n      <Webcam\r\n          ref={webcamRef}\r\n          muted={true}\r\n          style={{\r\n            position: \"center\",\r\n            marginLeft: \"0\",\r\n            marginRight: \"0\",\r\n            left: 0,\r\n            right: 0,\r\n            textAlign: \"center\",\r\n            zindex: 9,\r\n            width: 640,\r\n            height: 480,\r\n          }}\r\n        />\r\n\r\n        <canvas\r\n          ref={canvasRef}\r\n          className={\"dogs\"}\r\n          style={{\r\n            position: \"absolute\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            left: 0,\r\n            right: 0,\r\n            textAlign: \"center\",\r\n            zindex: 8,\r\n            width: 640,\r\n            height: 480,\r\n            \r\n          }}\r\n        />\r\n      \r\n      </div>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nServiceWorker.register();"],"sourceRoot":""}